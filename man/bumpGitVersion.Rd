% Generated by roxygen2 (4.0.2): do not edit by hand
\name{bumpGitVersion}
\alias{bumpGitVersion}
\title{Bump Git Version Number}
\usage{
bumpGitVersion(project = devtools::as.package(".")$package,
  temp_credentials = FALSE, .ns = NULL, ...)
}
\arguments{
\item{project}{\code{\link{character}}.
Name of the project under Git version control.}

\item{temp_credentials}{\code{\link{logical}}.
\code{TRUE}: delete HTTPS credentials after each bump;
\code{FALSE}: permanently store HTTPS credentials in \code{_netrc} file.
See details.}

\item{.ns}{\strong{Signature argument}.
Object containing namespace information.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\description{
Bumps an R package project to the next Git version number.
}
\details{
Performs all sorts of Git-related checks and tasks in order to take care
     that everything necessary is done that is related to bumping a project
     to a higher version number.

     This provided version number is transferred to \code{v{version-number}},
     e.g. \code{v0.1.1}, and added as a Git tag.
     All commits linked to the \emph{previous} version/tag are queried and added
     to file \code{CHANGES.md}. Additionally, a template section to state the
     changes in the \emph{new} version is added in file \code{NEWS.md}.

     Files \code{DESCRIPTION} and \code{CHANGES.md} are automatically
     commited to signal the version bump.

     Optionally, you can push the new version (i.e. the new tag) as well
     as the associated commit to a remote repository (default: \code{origin}).
     This can be any valid Git remote repository, including a GitHub
     repository

     Essentially, this function is a mere convenience wrapper for the
     actual workhorse function \code{\link[bumpr]{bump}} and its
     method associated to class \code{Bumpr.GitVersion.s3}.
}
\section{Asumptions}{

\itemize{
  \item{\strong{R package project}: } {

     You are using this function to systematically manage the versions
     of an R package project that follows the official conventions
     (see \url{http://cran.r-project.org/doc/manuals/r-release/R-exts.html}
  }
  \item{\strong{Local Git repository}: }{

     Your package project is under Git version control, i.e. a local Git
     repository has been created in your package project's root directory.
     (look for directory \code{.git} in your package project's root
     directory)
  }
  \item{\strong{Remote Git repository}: }{

     At the very least one remote repository with name \code{origin}
     has been defined for your local Git repository.

     Additional remote repositories with different
     names are not a problem. You can choose them interactively.
     (Run \code{git remote} in your git shell to find out about your
     remote repositories).

     GitHub repositories are supported
  }
  \item{\strong{HTTP credentials}: }{

     If you want to push to a GitHub repository or any other remote
     repository that relies on HTTPS for authentication, the function
     assumes that you \strong{are willing to store (at least temporarily) your
     HTTP credentials in this file}:
     \code{file.path(Sys.getenv("HOME"), "_netrc")}.

     Currently only tested for
     GitHub repositories as this is the location where the API seems to
     expect HTTP credentials when pushing to such a repository.

     \strong{However, You can choose to destroy this file after each bump by setting
     \code{temp_credentials = TRUE}}.
     I will try to find better ways of handling HTTPS credentials in future
     releases.
  }
}
}

\section{Disclaimer}{

\strong{This package is really new. So please test this function with
repositories that are not crucial for your productive work!}
}

\section{Recommendations}{

\itemize{
  \item{\strong{Initial commit}: }{

     Make sure that you already issued an initial commit for your \strong{local}
     repository and pushed this to your remote repository.
     The function does have built-in checks for very early stages of a
     Git repository (i.e. no commits yet, no \code{.gitignore} file yet,
     no branches on the remote repository yet), but I would not consider
     this completely stable and tested yet. If you want to check out what
     the function does in such early stages, I would recommend testing it
     with a toy Git/GitHub repository first
  }
}
}
\examples{
\dontrun{

##------------------------------------------------------------------------------
## DISCLAIMER  
##------------------------------------------------------------------------------

## Please that with repositories that are not crucial for your productive work!

## Make sure that you set your working directory to your package
## project's root directory and that you've read and understood the 
## assumptions that this function makes!
  
bumpGitVersion()

}
}
\author{
Janko Thyson \email{janko.thyson@gmail.com}
}
\references{
\url{http://github.com/jankothyson/bumpr}
}
\seealso{
\code{
  	\link[bumpr]{bumpGitVersion-GitVersion.S3-method}
   \link[bumpr]{bumpPackageVersion}
}
}

